{
    "patches": [
        {
            "label": "2025-10-14_11-20-36",
            "content": "@@ -120,16 +120,17 @@\n  = True%0A\n+%0A\n     def \n@@ -218,805 +218,43 @@\n     \n-if self.__ligado == False:%0A            return %22Status: Desligado%22%0A        else:%0A            return %22Status: Ligado%22%0A        %0A    def usar(self, tempo:int) -%3E None:%0A        if self.__ligado:%0A            print(F%22Usando por %7Btempo%7D minutos%22)%0A        else:%0A            print(%22erro: ligue o notebook primeiro%22)%0A%0A%0Adef main():%0A    line:str = input()%0A    print(%22$%22+line)%0A    args:list%5Bstr%5D = line.split(%22 %22)%0A    notebook = Notebook()%0A    while True:%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22show%22:%0A            notebook.mostrar()%0A        elif args%5B0%5D == %22desligar%22:%0A            notebook.desligar()%0A        elif args%5B0%5D == %22ligar%22:%0A            notebook.ligar()%0A        elif args%5B0%5D == %22usar%22:%0A            notebook.usar(args%5B1%5D)%0A%0A        else:%0A            print(%22invalido%22)%0A%0Amain()\n+return f%22notebook esta %7Bself.__ligado%7D%22\n",
            "lines": "12"
        },
        {
            "label": "2025-10-14_11-30-46",
            "content": "@@ -367,27 +367,28 @@\n mpo:int) -%3E \n-str\n+None\n :%0A        if\n@@ -415,23 +415,22 @@\n         \n-return \n+print(\n F%22Usando\n@@ -450,16 +450,17 @@\n minutos%22\n+)\n %0A       \n@@ -478,22 +478,22 @@\n         \n-return\n+print(\n %22erro: l\n@@ -517,16 +517,17 @@\n rimeiro%22\n+)\n %0A%0A%0Adef m\n",
            "lines": "43"
        },
        {
            "label": "2025-10-14_11-31-51",
            "content": "@@ -421,17 +421,17 @@\n  return \n-f\n+F\n %22Usando \n@@ -487,10 +487,8 @@\n turn\n- f\n %22err\n",
            "lines": "43"
        },
        {
            "label": "2025-10-14_11-32-31",
            "content": "@@ -1,21 +1,22 @@\n class \n-Bateria\n+Notebook\n :%0A    de\n@@ -34,25 +34,8 @@\n self\n-, capacidade: int\n ):%0A \n@@ -52,64 +52,27 @@\n f.__\n-capacidade = capacidade%0A        self.__carga = capacidad\n+ligado: bool = Fals\n e%0A%0A \n@@ -78,26 +78,21 @@\n     def \n-getBateria\n+ligar\n (self):%0A\n@@ -103,179 +103,83 @@\n     \n-return f%22%7Bself.__carga%7D/%7Bself.__capacidade%7D%22%0A    def usingBateria(self, tempo:int):%0A        self.__carga -= tempo%0A        if self.__carga %3C 0:%0A            self.__carga = 0\n+self.__ligado = True%0A    def desligar(self):%0A        self.__ligado = False%0A\n %0A   \n@@ -187,304 +187,103 @@\n def \n-carreg\n+mostr\n ar(self\n-, potencia:int , tempo:int):%0A        self.__carga += potencia * tempo%0A        if self.__carga %3E self.__capacidade:%0A            self.__carga = self.__capacidade%0A%0A    %0A    def temCarga(self):%0A        return self.__carga %3E 0%0A    %0A%0Aclass Carregador:%0A    def __init__(self, potencia:int):\n+) -%3E str:%0A        if self.__ligado == False:%0A            return %22Status: Desligado%22\n %0A   \n@@ -291,266 +291,58 @@\n     \n-s\n el\n-f.__potencia = potencia%0A    def getPotencia(self):%0A        return self.__potencia%0A    %0Aclass Notebook:%0A    def __init__(self):%0A        self.__ligado = False%0A        self.__bateria: Bateria %7C None = None%0A        self.__carregador: Carregador %7C None = None%0A\n+se:%0A            return %22Status: Ligado%22%0A        \n %0A   \n@@ -350,76 +350,36 @@\n def \n-lig\n+us\n ar(self\n-):%0A        if self.__bateria and self.__bateria.temCarga()\n+, tempo:int) -%3E str\n :%0A  \n@@ -376,35 +376,34 @@\n -%3E str:%0A        \n-   \n+if\n  self.__ligado =\n@@ -392,39 +392,33 @@\n if self.__ligado\n- = True\n+:\n %0A            pri\n@@ -418,2110 +418,604 @@\n     \n-print(%22msg: Notebook ligado%22)%0A        elif self.__carregador:%0A            self.__ligado = True%0A        else:%0A            print(%22fail: sem bateria ou carregador%22)%0A%0A    def desligar(self):%0A        self.__ligado = False%0A        print(%22msg: Notebook desligado%22)%0A%0A    def setBateria(self, bateria: Bateria):%0A        self.__bateria = bateria%0A        print(%22msg: Bateria conectada%22)%0A%0A    def rmBateria(self, bateria: Bateria):%0A        self.__bateria = None%0A        print(%22msg: Bateria removida%22)%0A    def setCarregador(self, carregador:Carregador):%0A        self.__carregador = carregador%0A        print(%22msg: Carregador conectado%22)%0A    def rmCarregador(self, carregador:Carregador):%0A        self.__carregador = None%0A        print(%22msg: carregador desconectado%22)%0A    def usar(self, tempo: int):%0A        if not self.__ligado:%0A            print(%22fail: ligue o notebook primeiro%22)%0A            return%0A        print(f%22msg: Usando por %7Btempo%7D minutos%22)%0A        if self.__bateria and self.__carregador:%0A            self.__bateria.carregar(self.__carregador.getPotencia(), tempo)%0A        elif self.__bateria:%0A            self.__bateria.usingBateria(tempo)%0A            if not self.__bateria.temCarga():%0A                print(%22bateira zeradad, notebook desligado%22)%0A                self.__ligado = False%0A        elif not self.__bateria or not self.__carregador():%0A            print(%22fail: sem bateria e sem carregador%22)%0A            self.__ligado = False%0A        if self.__bateria:%0A            print(self.__bateria.getBateria)%0A%0A    def show(self):%0A        status = %22ligado%22 if self.__ligado else %22desligado%22%0A        print(f%22Notebook: %7Bstatus%7D%22)%0A        if self.__bateria or self.__carregador:%0A            print(f%22bateria: %7Bself.__bateria.getBateria()%7D, potencia carregador: %7Bself.__carregador.getPotencia()%7D%22)%0A        else:%0A            print(%22sem bateria%22)%0A%0A%0A%22%22%22 %0Adef main():%0A    notebook:Notebook = Notebook()%0A    while True:%0A        %0A        line = input()%0A        print(%22$%22+line)%0A        args:list%5Bstr%5D = line.split(%22 %22)%0A        comando:str = args%5B0%5D%0A%0A        match comando:%0A            case %22end%22:%0A                break%0A %22%22%22\n+return f%22Usando por %7Btempo%7D minutos%22%0A        else:%0A            return f%22erro: ligue o notebook primeiro%22%0A%0A%0Adef main():%0A    line:str = input()%0A    print(%22$%22+line)%0A    args:list%5Bstr%5D = line.split(%22 %22)%0A    notebook = Notebook()%0A    while True:%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22show%22:%0A            notebook.mostrar()%0A        elif args%5B0%5D == %22desligar%22:%0A            notebook.desligar()%0A        elif args%5B0%5D == %22ligar%22:%0A            notebook.ligar()%0A        elif args%5B0%5D == %22usar%22:%0A            notebook.usar(args%5B1%5D)%0A%0A        else:%0A            print(%22invalido%22)%0A%0Amain()\n",
            "lines": "43"
        },
        {
            "label": "2025-10-16_09-10-15",
            "content": "class Bateria:\n    def __init__(self, capacidade: int):\n        self.__capacidade = capacidade\n        self.__carga = capacidade\n\n    def getBateria(self):\n        return f\"{self.__carga}/{self.__capacidade}\"\n    def usingBateria(self, tempo:int):\n        self.__carga -= tempo\n        if self.__carga < 0:\n            self.__carga = 0\n    def carregar(self, potencia:int , tempo:int):\n        self.__carga += potencia * tempo\n        if self.__carga > self.__capacidade:\n            self.__carga = self.__capacidade\n\n    \n    def temCarga(self):\n        return self.__carga > 0\n    \n\nclass Carregador:\n    def __init__(self, potencia:int):\n        self.__potencia = potencia\n    def getPotencia(self):\n        return self.__potencia\n    \nclass Notebook:\n    def __init__(self):\n        self.__ligado = False\n        self.__bateria: Bateria | None = None\n        self.__carregador: Carregador | None = None\n\n    def ligar(self):\n        if self.__bateria and self.__bateria.temCarga():\n            self.__ligado = True\n            print(\"msg: Notebook ligado\")\n        elif self.__carregador:\n            self.__ligado = True\n        else:\n            print(\"fail: sem bateria ou carregador\")\n\n    def desligar(self):\n        self.__ligado = False\n        print(\"msg: Notebook desligado\")\n\n    def setBateria(self, bateria: Bateria):\n        self.__bateria = bateria\n        print(\"msg: Bateria conectada\")\n\n    def rmBateria(self, bateria: Bateria):\n        self.__bateria = None\n        print(\"msg: Bateria removida\")\n    def setCarregador(self, carregador:Carregador):\n        self.__carregador = carregador\n        print(\"msg: Carregador conectado\")\n    def rmCarregador(self, carregador:Carregador):\n        self.__carregador = None\n        print(\"msg: carregador desconectado\")\n    def usar(self, tempo: int):\n        if not self.__ligado:\n            print(\"fail: ligue o notebook primeiro\")\n            return\n        print(f\"msg: Usando por {tempo} minutos\")\n        if self.__bateria and self.__carregador:\n            self.__bateria.carregar(self.__carregador.getPotencia(), tempo)\n        elif self.__bateria:\n            self.__bateria.usingBateria(tempo)\n            if not self.__bateria.temCarga():\n                print(\"bateira zeradad, notebook desligado\")\n                self.__ligado = False\n        elif not self.__bateria or not self.__carregador():\n            print(\"fail: sem bateria e sem carregador\")\n            self.__ligado = False\n        if self.__bateria:\n            print(self.__bateria.getBateria)\n\n    def show(self):\n        status = \"ligado\" if self.__ligado else \"desligado\"\n        print(f\"Notebook: {status}\")\n        if self.__bateria or self.__carregador:\n            print(f\"bateria: {self.__bateria.getBateria()}, potencia carregador: {self.__carregador.getPotencia()}\")\n        else:\n            print(\"sem bateria\")\n\n\n\"\"\" \ndef main():\n    notebook:Notebook = Notebook()\n    while True:\n        \n        line = input()\n        print(\"$\"+line)\n        args:list[str] = line.split(\" \")\n        comando:str = args[0]\n\n        match comando:\n            case \"end\":\n                break\n \"\"\"",
            "lines": "100"
        }
    ]
}